buildscript {
    dependencies {
        classpath(
                'org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE'
        )
    }
}

plugins {
    id "nebula.ospackage" version "3.4.0"
}

apply plugin: 'java'
apply plugin: 'spring-boot'

group = 'org.bahmni.export'
version = '0.0.3'

description = "Bahmni exports for SEARCH SMU"

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    jcenter()
}

dependencies {
//    compile group: 'org.springframework.boot', name: 'spring-boot-starter-batch', version: '1.3.4.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '1.4.1.RELEASE'
    compile group: 'org.springframework.batch', name: 'spring-batch-test', version: '3.0.7.RELEASE'
    compile group: 'org.springframework', name: 'spring-test', version: '4.2.6.RELEASE'
    compile group: 'org.hsqldb', name: 'hsqldb', version: '2.3.3'
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.35'
    compile group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4'
    compile group: 'commons-io', name: 'commons-io', version: '2.0.1'
    compile 'commons-lang:commons-lang:2.6'
    compile group: 'org.freemarker', name: 'freemarker', version: '2.3.23'
    compile group: 'org.springframework', name: 'spring-context-support', version: '4.2.6.RELEASE'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
}

jar {
    manifest {
        attributes 'Main-Class': 'org.bahmni.batch.Application'
    }
}

ospackage {
    packageName = 'bahmni-export'
    release = System.getenv('GO_PIPELINE_COUNTER') ?: 1
    arch = NOARCH
    os = LINUX
    user = 'root'

    into '/opt/bahmni-export'

    from("${projectDir}/scripts/rpm/") {
        fileMode = 0755
        createDirectoryEntry = true
        into '/opt/bahmni-export/bin'
    }

    from("${buildDir}/libs") {
        fileMode = 0755
        createDirectoryEntry = true
        into "/opt/bahmni-export/libs"
    }
}

buildRpm {
    dependsOn "build", "jar"

    requires("cronie")

    postInstall file("${projectDir}/scripts/postinstall.sh")
    postUninstall file("${projectDir}/scripts/postuninstall.sh")
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}
